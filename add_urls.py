import redis
import json

# Create a redis client
redisClient =  redis.from_url('redis://:irro6HsquxkoE2S@localhost:6379/0')

# Push URLs to Redis Queue using JSON data format
try:
    urls = [
        "B0CN3V3L8P",
        "B0CN3VKVBT",
        "B0CN3W1PFZ",
        "B0CN3XW4ZN",
        "B0CN3SQNJ6",
        "B0CN3VDRYB",
        "B0CN3VHF19",
        "B0CN3W37K5",
        "B0CN3TT315",
        "B0CN3WFWL4",
        "B0CN3W33GV",
        "B0CN3SDY62",
        "B0CN3V852N",
        "B0CN3XFLTD",
        "B0CN3VKNQ1",
        "B0CN3V3H6M",
        "B0CN3WLRBC",
        "B0CN3VWMFF",
        "B0CN3TLHDM",
        "B086KYKR6Q",
        "B086KSDTQ4",
        "B086L4BXZC",
        "B086KNLH9V",
        "B086KXNGLS",
        "B086L76ZKM",
        "B00HVVVGN6",
        "B00CAXRE6I",
        "B00DZPAWKK",
        "B00JFM45QE",
        "B09G4VWJHT",
        "B09G5BC268",
        "B09G586KYS",
        "B09G4MCLF2",
        "B09G4X7H85",
        "B09G4T3V2P",
        "B086LDXW63",
        "B086KP9XRS",
        "B086KX1X2F",
        "B086KYG3FC",
        "B086KQXS9W",
        "B086KM8V53",
        "B0B57LPVX9",
        "B0B57LFKSW",
        "B0B57LVVTR",
        "B0B57KFMCT",
        "B0B57JS5BH",
        "B0B57JC9R6",
        "B086L79Q72",
        "B086L69KCK",
        "B086L79Q71",
        "B086KQCK7P",
        "B086L69KCL",
        "B086L79Q6X",
        "B00PWP0JFO",
        "B00CAXR95Y",
        "B00BW5VJW0",
        "B00OQRQAT8",
        "B00CBLTGB0",
        "B00O8MVL0Y",
        "B00MOJ6DJ2",
        "B00O8MVKYG",
        "B00HVX1NC8",
        "B09G4SZ2V3",
        "B09G4SNN2F",
        "B09G56C8KW",
        "B09G4S38WW",
        "B09G511GTC",
        "B09G58633T",
        "B00CBLTMAA",
        "B00GB0G41C",
        "B00G99WZJU",
        "B00G99WYX2",
        "B00G99WZYU",
        "B086L77BVP",
        "B086KNLH9L",
        "B086KM8V49",
        "B086L3RJBG",
        "B086L78CDJ",
        "B086L4BXZ7",
        "B004QO3WL0",
        "B004QO7MG6",
        "B004QO20P4",
        "B004QO20MW",
        "B0C3HXLG94",
        "B0C3J6PBN1",
        "B0C3J6PNB9",
        "B0C3HX3TG9",
        "B00ACIGNGU",
        "B00ACIGNH4",
        "B00ACIGNJW",
        "B00ACIGNMY",
        "B00ACIGP6S",
        "B00ACIGP5E",
        "B00ACIGP7W",
        "B00ACIGP2W",
        "B0BPTJFQ7K",
        "B0BPTFGMJC",
        "B0BPTHKDT6",
        "B0BPTFD3TR",
        "B0BPTFZKQY",
        "B0BPTGV3VD",
        "B0BQZ9H4QN",
        "B0BQZ7HMDS",
        "B0BQZ93D6H",
        "B0BQZ7PDFQ",
        "B0BQZ5MN9K",
        "B0BQZ8BZWQ",
        "B0BQZ8V5F2",
        "B0BQZ7H6Y7",
        "B0BQZ97JDK",
        "B0BQZ7QBPZ",
        "B0BQZ6KMGG",
        "B0BQZ81FZW",
        "B0BXBK8F7C",
        "B0BXBKJ63B",
        "B0BXBJBTDB",
        "B0BXBWZ8X3",
        "B0BXBHBSW5",
        "B0BXBKWFGR",
        "B0BQZBBJB3",
        "B0BQZ75TP9",
        "B0BQZ9Z546",
        "B0BQZ5XGYD",
        "B0BQZ8QHD9",
        "B0BQZ5L6PS",
        "B0BXBLDRXD",
        "B0BXBMMY7M",
        "B0BXBJ49ZQ",
        "B0BXBKB26J",
        "B08H3N7QMS",
        "B08H43LNQ9",
        "B08H3HMCTR",
        "B08H3TF56Z",
        "B08H3CSNWW",
        "B08H3MPH7W",
        "B08H3Q7N45",
        "B08H3RBQPX",
        "B08H3DSM5D",
        "B08H3TCLZ1",
        "B08H3K93XX",
        "B08H3HFQXP",
        "B0C1P9BKJ5",
        "B0C1P8FGPW",
        "B0C1PCNS29",
        "B0C1PDD9G6",
        "B0C1PB2HHM",
        "B0C1PF7QJ2",
        "B09R82TP2K",
        "B09R7YMLZB",
        "B09R83PLMG",
        "B09R829YGL",
        "B09R7ZTV5N",
        "B09R82W413",
        "B0B57KVM72",
        "B0B57N4Y1F",
        "B0B57M36K6",
        "B0B57MP1ZD",
        "B0B57KTYDH",
        "B0B57KVHX9",
        "B09R817FDN",
        "B09R7ZK21J",
        "B09R829TV9",
        "B09R8281ZL",
        "B09R7ZJ23T",
        "B09R7Z3LDC",
        "B09R7YKY1P",
        "B09R7YKSM1",
        "B09R82J67F",
        "B09R81PJN4",
        "B09R7ZLHXS",
        "B09R81FFTL",
        "B0C1P9PL2T",
        "B0C1PDSYZB",
        "B0C1PBM2DH",
        "B0C1P9P3FF",
        "B0C1P8XYL9",
        "B0C1P9ZBS5",
        "B01HOG83RO",
        "B01HOG83LU",
        "B01HOG8J82",
        "B01HOG83ME",
        "B00D1ARZMC",
        "B00HVW5FQO",
        "B00L6PI71W",
        "B00HVW5HP8",
        "B086KTFMBY",
        "B086KY66PJ",
        "B086L5PJQY",
        "B086L57B7J",
        "B086KY66PH",
        "B086L77BV9",
        "B0BNP5DR21",
        "B0BNP8V29K",
        "B0BNP7STX3",
        "B0BNP58LP7",
        "B00CAXQU68",
        "B00LHMMVQQ",
        "B00CAXQV3K",
        "B00HVVVMM6",
        "B086KW7FNZ",
        "B086KXKXKW",
        "B086KKT21F",
        "B086KYJX5Y",
        "B086KQXS8K",
        "B086KX1X19",
        "B086KY66P9",
        "B086L4XXGG",
        "B086L1PM8V",
        "B086KXNGKY",
        "B086L4XXGF",
        "B086KYG3CH",
        "B00LSRTZPU",
        "B00LSRU2JS",
        "B00LSRU1QW",
        "B00LSRU162",
        "B074XY7M7Q",
        "B074XY2K7M",
        "B074XXRHZG",
        "B074XY7MTG",
        "B074XY2L3W",
        "B00UOO7IQQ",
        "B00UOO7FLO",
        "B00UOO7LFY",
        "B00UOO7OYW",
        "B00V688LDS",
        "B00V688L5G",
        "B00V688LCO",
        "B00V688L10",
        "B0BHXWD4WH",
        "B0BHWLYGM6",
        "B0B28K34VW",
        "B0BHXSXSFF",
        "B0C3GL8VDT",
        "B0BHX8DB9T",
        "B0BHX6W3SJ",
        "B0B28LSLS4",
        "B0BHXBT7C3",
        "B0BHX7SG7S",
        "B09PF8R454",
        "B09PF7PPMP",
        "B09PF7NPPZ",
        "B09PF6Q6YV",
        "B09PF7CGN1",
        "B09PF7ZKWB",
        "B09PF8NG79",
        "B09PF8Y7SX",
        "B09PF7S4LR",
        "B09PF6C3NG",
        "B09PF51CNQ",
        "B09PF8G4M4",
        "B09PF71VH6",
        "B09PF6ZK45",
        "B09PF9VFCP",
        "B09PF7685Q",
        "B09PF6VPXQ",
        "B09PF6RKCL",
        "B09PF7T6SK",
        "B09PF6XRGX",
        "B09PF6JWRR",
        "B09PF87M8N",
        "B09PF7JT86",
        "B09PF79V6H",
        "B09PF8Q29J",
        "B09PF7CHN9",
        "B09PF954ZQ",
        "B09PF8M9YP",
        "B09PF7NFF4",
        "B09PF7NPQ1",
        "B09PF7QC44",
        "B09PF87JFW",
        "B09PF74Q82",
        "B09PF84RHH",
        "B09PF78HVT",
        "B09PF7Y25B",
        "B09PF893PP",
        "B09PF76VHQ",
        "B09PF792N9",
        "B09PF6SNNT",
        "B09PF5ZHCW",
        "B09PF6WJ4P",
        "B09PF77T43",
        "B09PF7VR4Q",
        "B09PF7K6L6",
        "B09PF7M9GP",
        "B09PF8M67Y",
        "B09PF7KZZM",
        "B09PF8B56B",
        "B09PF7XN8X",
        "B0B47MJ6KL",
        "B0B47QMMSZ",
        "B0B47YXSXT",
        "B07FMXH1VL",
        "B07FMWNXR9",
        "B07H8CBR93",
        "B07GR4YRYW",
        "B07FN3WDF6",
        "B07FMVVDZL",
        "B07FMTGGQP",
        "B07FMZ12CJ",
        "B07FMZR6LJ",
        "B07FMVN98Y",
        "B07GQW5WYX",
        "B07H8B1262",
        "B07FMX9FSF",
        "B07GQRCQSJ",
        "B07H8BPL62",
        "B07GQY86YD",
        "B0B47SCW45",
        "B0B47L5QW4",
        "B07H88V3RF",
        "B07FMVW6VV",
        "B07FN1HF8Y",
        "B07FMZJTNP",
        "B07GBWHXBX",
        "B07GPFPWNV",
        "B07FMWTC1P",
        "B07FMYL9NR",
        "B07GBXQSGH",
        "B07GBWP9R7",
        "B07GPD7V38",
        "B07GBW8QYP",
        "B07FMWJXVM",
        "B07FMXQQWB",
    ]
    
    formated_urls = list()
    for url in urls:
        formated_url = f"https://www.amazon.com/dp/{url}/ref=cm_cr_arp_d_product_top?ie=UTF8&th=1"
        formated_urls.append(formated_url)
    # Convert URLs to JSON format and push them to the Redis queue
    for url in formated_urls:
        redisClient.lpush('asins_queue:start_urls', json.dumps({'url': url}))
    print('Added successfully')
except Exception as e:
    print(str(e))

# Get the number of items in the queue
queue_length = redisClient.llen('asins_queue:start_urls')
print("Number of URLs in the queue:", queue_length)

# Retrieve and print each URL from the queue
for i in range(queue_length):
    url = json.loads(redisClient.lindex('asins_queue:start_urls', i))
    print(f"URL {i + 1}: {url['url']}")
